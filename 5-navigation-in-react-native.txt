----------------------------------------------------------------------------------------

COMO INSTALAR O AMBIENTE DE NAVEGAÇÃO NO REACT NATIVE:
--> Basta instalar o React Navigation com os comando abaixo:

COM NPM:
npm install @react-navigation/native

COM YARN:
yarn add @react-navigation/native


--> Depois, tem que instalar alguns pacotes adicionais para cada ambiente lidar com a navegação de forma diferente. Basta rodar este comando:

expo install react-native-screens react-native-safe-area-context


--> Após isso, tem que instalar o react navigation stack, para lidar com a pilha de navegação do app:

COM NPM:
npm install @react-navigation/native-stack

COM YARN:
yarn add @react-navigation/native-stack


--> Criar uma pasta 'routes' dentro da pasta 'src'.
--> Criar um arquivo 'stack.routes.tsx' dentro da pasta 'routes'.
--> Importar o React do 'react'.
--> Importar o { createStackNavigator } do '@react-navigation/native-stack'.

----------------------------------------------------------------------------------------

COMO CRIAR O STACK ROUTES:
--> Basta ir na pasta 'stack.routes.tsx' recém criada e adicionar a função do AppRoutes, que pode ter qualquer outro nome também:

-------------------------------------------------------------------
import React from 'react';
import { 
    createNativeStackNavigator 
} from '@react-navigation/native-stack';

import { Welcome } from '../pages/Welcome';
import { UserIdentification } from '../pages/UserIdentification';
import { Confirmation } from '../pages/Confirmation';

const stackRoutes = createNativeStackNavigator();

const AppRoutes: React.FC = () => (
    <stackRoutes.Navigator
        screenOptions={{
            headerShown: false,
        }}
    >
        <stackRoutes.Screen 
            name="Welcome"
            component={Welcome}
        />
        <stackRoutes.Screen 
            name="UserIdentification"
            component={UserIdentification}
        />
        <stackRoutes.Screen 
            name="Confirmation"
            component={Confirmation}
        />
    </stackRoutes.Navigator>
);

export default AppRoutes;
-------------------------------------------------------------------

--> O const AppRoutes: React.FC = () => (); serve para tipar o AppRoutes como um functional component (FC).
--> O stackRoutes.Navigator define a pilha de navegação das páginas.
--> O stackRoutes.Navigator possui a propriedade screenOptions= {{headerShow: false}} para esconder o cabeçalho com o nome da página na hora de chamar alguma página.
--> A tag <stackRoutes.Screen/> tem as propriedades 'name' e 'component', que servem para identificar e mostrar as páginas de diferentes nomes que devem ser mostradas.
--> A ordem em que essas stackRoutes aparecem é a ordem que as páginas devem ser mostradas de acordo como são empilhadas na stack. 
--> Por isso, é preciso importar nesse arquivo também as páginas que serão usadas e renderizadas.
--> O navegador vai abrir primeiro a tela que estiver sempre em cima, ou seja, a ordem de navegação de cima para baixo.

----------------------------------------------------------------------------------------

COMO CRIAR UM CONTAINER DE NAVEGAÇÃO (INDEX.TSX):
--> Basta ir na pasta 'routes' e adicionar um arquivo 'index.tsx'.
--> Tem que importar o react do 'react'.
--> Tem que importar o NavigationContainer da biblioteca '@react-navigation/native'.
--> Depois importar a stack routes recém-criada.
--> Criar a função das routes e dentro do return é pra colocar a <stackRoutes/> envolvida pela tag <NavigationContainer></NavigationContainer>.
--> Assim é o código exemplo:

-------------------------------------------------------------------
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';

import StackRoutes from "./stack.routes";

const Routes = () => (
    <NavigationContainer>
        <StackRoutes />
    </NavigationContainer>
);

export default Routes;
-------------------------------------------------------------------

--> Assim, como esse container de navegação é exportado como um componente, é possível ir no App.tsx e importar ele e enfim renderiza-lo juntamente com sua própria pilha de navegação.

----------------------------------------------------------------------------------------

COMO RENDERIZAR O CONTAINER DE NAVEGAÇÃO NO APP.TSX.
--> Basta ir no App.tsx e importar o 'index.tsx' da pasta 'routes'.
import Routes from "./src/routes";

--> Basta apenas colocar from "./src/routes", pois se não colocar o nome do arquivo, o React Native vai procurar por padrão algum arquivo com o nome 'index', e aí ele vai encontrar o 'index.tsx'.
--> Depois disso, basta renderizar o <Routes /> no return da função do App.

----------------------------------------------------------------------------------------

COMO IMPLEMENTAR AS ROTAS DE NAVEGAÇÃO NAS TELAS:
--> Basta ir no arquivo de cada uma das páginas/telas criadas e importar o useNavigation da biblioteca "@react-navigation/core".
import { useNavigation } from "@react-navigation/core";

--> Depois, basta tipar o Navigation para a propriedade "navigate" não dar erro de tipagem pelo Typescript.

type Navigation = {
    navigate: (value: string) => void;
}

const { navigate } = useNavigation<Navigation>();

--> Depois criar uma função que manipule a troca de tela para outra tela específica 

const handleStart = () => {
    navigate("UserIdentification");
}

--> Aqui, o navigate está orientado a fazer a mudança para a tela chamada "UserIdentification".
--> Por fim, basta ir no botão renderizado pela página e adicionar a propriedade 'onPress={nomedafunçãohandler}'.

<TouchableOpacity 
          style={styles.button} 
          activeOpacity={0.7}
          onPress={handleStart}
>
	  Confirmar
</TouchableOpacity>

--> Assim, quando o botão for clicado, a função handler será chamada e o useNavigation irá usar o navigate para mudar a tela para a próxima tela escolhida.

----------------------------------------------------------------------------------------