--------------------------------------------------------------------------------------------

COMO CONFIGURAR O SERVIDOR DA API:
--> Basta ir dentro da pasta 'src' e criar uma pasta chamada 'services'.
--> Dentro da pasta 'services', é pra colocar um arquivo 'server.json', que vem do backend.
--> A api serve para que seus dados sejam consumidos e não se necessite de apis externas ou de internet.
--> Então, tem que instalar o 'axios'.

COM NPM:
npm install axios

COM YARN:
yarn add axios


COMO CRIAR CONFIGURAÇÃO PARA CONSUMIR UMA API:
--> Ir na pasta 'services' recém criada e criar um arquivo chamado 'api.ts'.
--> Dentro dele, importar o axios e depois criar a baseURL usando o endereço IP do computador.
--> Para pegar o endereço IP, basta rodar no terminal:
    ipconfig /all
--> E depois pegar o endereço IP.
--> Assim fica o código:

    import axios from "axios";

    const api = axios.create({
        baseURL: "http://192.168.1.12:3333",
    });

    export default api;

--> O template é 'baseURL:', depois "http://endereçoIp:numeroDaPorta".
--> A porta 3333 geralmente é o padrão usado para apis.


IMPORTAR O JSON SERVER:
--> COM NPM: npm install -g json-server

RODAR O JSON SERVER PASSANDO O HOST E A PORTA PARA ELE COMO FLAGS:
json-server ./src/services/server.json --host 192.168.1.12 --port 3333

--> Com isso, o servidor será iniciado, e será exibida a seguinte mensagem:

\{^_^}/ hi!

  Loading ./src/services/server.json
  Done

  Resources
  http://200.235.92.75:3333/plants_water_frequencies
  http://200.235.92.75:3333/plants_environments    
  http://200.235.92.75:3333/plants

  Home
  http://200.235.92.75:3333

  Type s + enter at any time to create a snapshot of the database

--> O HOME é o endereço do servidor que contém todas as rotas da api.

--------------------------------------------------------------------------------------------

COMO CONSUMIR A API COM O USESTATE E USEEFFECT:
--> Basta criar uma interface com algum nome, que recebe as propriedades dos tipos que rota de dados da api possui.
--> Exemplo:

interface DataValues{
	key: string;
	title: string;
}

--> Depois, basta criar um useState que recebe um array de objetos tipados com Typescript. Esses objetos precisam ter as propriedades definidas pela rota com os dados da api.
--> Exemplo:

const [dataValues, setDataValues] = useState<DataValues[]>([]);


--> Após isso, basta chamar o useEffect() e passar para ele um array vazio como controlador desse hook, daí o useEffect será executado apenas uma vez antes da página ser exibida ao usuário. 
--> Como primeiro parâmetro do useEffect, é preciso passar uma função anônima (arrow function) que retorna um valor através de uma função assíncrona, que por sua vez, recebe um valor de uma requisição da api (uma promise).
--> Para isso é preciso usar um await para aguardar e receber o valor da requisição da api. Assim que receber o valor, a função assíncrona deve usar um useState para setar o valor atual do state e criar um objeto com os valores retornados pela requisição da api.
--> Por fim, deve-se chamar essa função anônima antes do fechamento do useEffect.
--> Exemplo:

useEffect(() => {
	async function fecthData(){
		const {data} = await api.get("nome_da_rota");
		setData(data);
	}
	
	fetchData();
},[]);


--> Por fim, é preciso apenas usar esses dados em algum ponto do código.

--------------------------------------------------------------------------------------------

COMO ORDENAR OS NOMES DOS ITENS DA API COM API.GET:
--> Basta adicionar '?_sort=propriedadedaapi&_order=asc' na frente do nome da rota da api.
--> O 'asc' no final significa 'ascendente', e o 'desc' significa 'descendente'.
--> Exemplo:
        async function fecthData(){
		const {data} = await api.get("plants?_sort=name&_order=asc");
		setData(data);
	}
	
	fetchData();

--> Para mais informações, consultar o site:
https://github.com/typicode/json-server#sort

--------------------------------------------------------------------------------------------