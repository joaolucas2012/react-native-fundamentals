--------------------------------------------------------------------------------

COMO ADICIONAR COMPONENTES AO REACT NATIVE:
--> Basta seguir quase o mesmo padrão usado no React JS.
--> É só pegar uma parte do código que pode ser reutilizável, criar uma pasta components dentro da pasta src e colocar o seguinte código na sintaxe abaixo:

import React from "react";
import { coisasNecessarias } from "react-native";

export function Componente(){
   return(
      código aqui
   )
}

--> Depois, basta ir em algum return de uma página e chamar o componente criado por meio de uma tag personalizada.
--> Importar o componente antes de chama-lo.

--------------------------------------------------------------------------------

COMO PASSAR PROPRIEDADES TIPADAS PARA UM COMPONENTE:
--> Basta criar um objeto tipado com Typescript antes da função do componente, especificando o tipo de dados que a propriedade precisa receber para o componente ser exibido em tela.
--> Para isso, basta escrever 'interface' e o nome da propriedade do componente e depois passar entre {} o valor que precisa ser recebido.

interface ButtonProps {
    title: string;
}

--> Depois, na função do componente, basta colocar como parâmetro o objeto tipado com o nome da propriedade entre {} e completar com ': nomeDaPropriedade'.
--> E então, no return, basta colocar o nome da propriedade entre chaves.

export function Button({ title } : ButtonProps){
    return(
        <TouchableOpacity>
            <Text>
                { title }
            </Text>
        </TouchableOpacity>
    );
};

--> Depois, dentro do return de alguma página, basta chamar o componente e passar a propriedade a ele no mesmo tipo exigido pelo typescript.

<Button title={ "Avançar" }/>

--------------------------------------------------------------------------------
export function Button({ title } : ButtonProps){
    return(
        <TouchableOpacity style={styles.button} activeOpacity={0.7}>
            <Text style={styles.buttonText}>
                { title }
            </Text>
        </TouchableOpacity>
    );
};

--------------------------------------------------------------------------------

ESTADOS NO REACT-NATIVE:
--> É o mesmo que os estados no React Js, usando o hook useState.
--> O useState retorna um vetor de dois valores, sendo que o primeiro valor é uma variável que representa e armazena o estado atual do componente, e o segundo valor é uma função que serve para atualizar o estado atual do componente.
--> É a mesma sintaxe e notação do React Js.

const [estado, setEstado] = useState('');

--------------------------------------------------------------------------------

COMO PASSAR PROPRIEDADES PARA UM BOTÃO NO REACT NATIVE:
--> Basta importar o TouchableOpacityProps da biblioteca 'react-native'.
--> Depois, na tipagem do Typescript para o botão, basta escrever extends TouchableOpacityProps na frente:

interface ButtonProps extends TouchableOpacityProps {
    title: string;
}

--> Depois, na função do componente botão, basta colocar como parâmetro um ...rest na frente da propriedade que já estava sendo exigida antes pelo Typescript, que eu mesmo tinha criado.
--> Exemplo:

export function Button({ title, ...rest } : ButtonProps){}

--> O rest serve para puxar todas as outras propriedades do TouchableOpacity que se aplicam ao botão, usando o spread operator. Com isso, pode-se usar outras propriedades além do title, como o onPress, por exemplo, que vem junto com o TouchableOpacityProps.
--> Após isso, basta colocar o {... rest} como uma propriedade na hora da renderização de um TouchableOpacity, dentro do componente botão. Exemplo:

    return(
        <TouchableOpacity style={styles.button} activeOpacity={0.7} {...rest}>
            <Text style={styles.buttonText}>
                { title }
            </Text>
        </TouchableOpacity>
    );

--> Aqui, onde o rest está permite que sejam adicionadas outras propriedades na hora da renderização do componente botão em alguma page.
--> Com tudo isso, basta apenas ir numa page e importar o useState da biblioteca 'react' e usar normalmente antes do return, como no React Js.
--> Depois que eu criar alguma função handler que manipule e atualize o estado do componente com o useState, basta apenas adicionar uma propriedade 'onPress' no botão renderizado, e dentro de chaves passar o nome da função handler.
--> Assim, toda vez que o botão for clicado, uma função handler será chamada e o useState atualizará o estado de algum componente na tela, sob alguma lógica.
 
--------------------------------------------------------------------------------